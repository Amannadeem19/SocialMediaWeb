import C, { createElement as ge } from "react";
import X from "@mui/material/Chip";
import { styled as P } from "@mui/material/styles";
import { jsx as x } from "react/jsx-runtime";
import ye from "@mui/icons-material/Close";
import be from "@mui/material/ClickAwayListener";
import Ee from "@mui/material/IconButton";
import De from "@mui/material/TextField";
const O = {
  enter: "Enter",
  backspace: "Backspace"
}, Ae = {
  ime: 229
}, Ie = P(X)(({ theme: t, size: n }) => `
    max-width: 100%;
    margin: 2px 4px;
    height: ${n === "small" ? "26px" : "32px"};


    &[aria-disabled="true"] > svg {
      color: ${t.palette.action.disabled};
      cursor: default;
    }

    &.MuiChipsInput-Chip-Editing {
      background-color: ${t.palette.primary.light};
      color: ${t.palette.primary.contrastText};
    }
  `), we = {
  ChipStyled: Ie
}, H = (t) => {
  const {
    className: n,
    index: i,
    onDelete: r,
    disabled: s,
    onEdit: g,
    isEditing: D,
    disableEdition: h,
    ...y
  } = t, c = (d) => {
    d.key === O.enter && r(i);
  }, A = (d) => {
    d?.preventDefault?.(), d?.stopPropagation?.(), r(i);
  }, b = (d) => {
    d.target.textContent === y.label && (s || g(i));
  };
  return /* @__PURE__ */ x(we.ChipStyled, {
    className: `MuiChipsInput-Chip ${D ? "MuiChipsInput-Chip-Editing" : ""} ${n || ""}`,
    onKeyDown: c,
    disabled: s,
    onDoubleClick: h ? void 0 : b,
    tabIndex: s ? -1 : 0,
    "aria-disabled": s,
    onDelete: A,
    ...y
  });
};
function ke(t) {
  return typeof t == "boolean";
}
function Oe(t) {
  return typeof t == "object" && !Array.isArray(t) && t !== null;
}
function J(t, n) {
  typeof n == "function" ? n(t) : n && Oe(n) && "current" in n && (n.current = t);
}
const Te = P("div")`
  top: 50%;
  transform: translateY(-50%);
  right: 10px;
  position: absolute;
`, $e = P(De)((t) => `
    max-width: 100%;

    .MuiInputBase-root {
      display: flex;
      flex-wrap: wrap;
      align-items: flex-start;
      row-gap: 5px;
      padding-top: ${t.size === "small" ? "5px" : "9px"};
      padding-right: ${t.InputProps?.endAdornment ? "30px" : "9px"};
      padding-bottom: ${t.size === "small" ? "5px" : "9px"};
      padding-left: 10px;

      input {
        min-width: 30px;
        width: auto;
        flex-grow: 1;
        text-overflow: ellipsis;
        padding: ${t.size === "small" ? "3.5px 4px" : "7.5px 4px"};
        align-self: center;
      }
    }
  `), Be = P(X)(({ theme: t, size: n }) => `
    max-width: 100%;
    margin: 2px 4px;
    height: ${n === "small" ? "26px" : "32px"};

    &[aria-disabled="true"] > svg.MuiChip-deleteIcon {
      color: ${t.palette.action.disabled};
      cursor: default;
    }
  `), Q = {
  ChipStyled: Be,
  TextFieldStyled: $e,
  EndAdornmentClose: Te
}, Z = C.forwardRef((t, n) => {
  const {
    chips: i,
    onAddChip: r,
    onEditChip: s,
    onDeleteChip: g,
    onDeleteAllChips: D,
    InputProps: h,
    onInputChange: y,
    disabled: c,
    clearInputOnBlur: A,
    validate: b,
    error: d,
    helperText: T,
    hideClearAll: I,
    inputProps: K,
    size: $,
    disableDeleteOnBackspace: v,
    disableEdition: V,
    className: M,
    renderChip: F,
    addOnWhichKey: w,
    onFocus: o,
    inputRef: p,
    inputValue: B,
    ...ee
  } = t, [te, ne] = C.useState(""), [z, Y] = C.useState(""), N = C.useRef(null), S = C.useRef(!1), ie = C.useRef(typeof B == "string"), [m, W] = C.useState(null), {
    onKeyDown: le,
    ...re
  } = K || {}, {
    inputRef: Se,
    ...oe
  } = h || {}, j = () => {
    Y("");
  }, _ = ie.current, k = _ ? B : te, R = (e) => {
    y?.(e), _ || ne(e);
  }, ae = (e) => {
    R(i[e]), W(e), j();
  }, E = () => {
    W(null);
  }, f = () => {
    j(), R("");
  }, se = (e) => {
    R(e.target.value);
  }, L = () => {
    !S.current || (m !== null ? (E(), f()) : A && f(), S.current = !1);
  }, de = (e) => {
    N.current = e, p && J(e, p), n && J(e, n);
  }, U = (e, l) => (u) => {
    if (typeof b == "function") {
      const a = b(e);
      if (a === !1) {
        l.preventDefault();
        return;
      }
      if (!ke(a) && a.isError) {
        l.preventDefault(), Y(a.textError);
        return;
      }
    }
    u();
  }, pe = (e, l, u) => {
    U(e, u)(() => {
      s?.(e, l), E(), f();
    });
  }, ue = (e, l) => {
    U(e, l)(() => {
      r?.(k.trim()), f();
    });
  }, ce = (e, l) => l === Ae.ime ? !1 : w ? Array.isArray(w) ? w.some((u) => u === e) : w === e : e === O.enter, he = (e) => {
    const l = ce(e.key, e.keyCode), u = e.key === O.backspace, a = k.trim();
    if (e.code === "Tab") {
      L();
      return;
    }
    if (l && e.preventDefault(), k.length > 0 && l)
      a.length === 0 ? f() : m !== null ? pe(a, m, e) : ue(a, e);
    else if (u && k.length === 0 && i.length > 0 && !v) {
      const q = i.length - 1;
      g?.(q), m === q && E();
    }
    le?.(e);
  }, fe = (e) => {
    e.preventDefault(), o?.(e), S.current = !0;
  }, Ce = (e) => {
    e.preventDefault(), !I && !c && (D?.(), f(), E());
  }, me = (e) => {
    e === m ? (f(), E()) : ae(e), N.current?.focus();
  }, xe = (e) => {
    c || (g?.(e), m !== null && (E(), f()));
  }, G = i.length > 0;
  return /* @__PURE__ */ x(be, {
    onClickAway: L,
    children: /* @__PURE__ */ x(Q.TextFieldStyled, {
      value: k,
      onChange: se,
      ref: n,
      className: `MuiChipsInput-TextField ${M || ""}`,
      size: $,
      placeholder: "Type and press enter",
      onFocus: fe,
      inputProps: {
        onKeyDown: he,
        ...re
      },
      disabled: c,
      error: Boolean(z) || d,
      helperText: z || T,
      InputProps: {
        inputRef: de,
        startAdornment: G ? i.map((e, l) => {
          const u = `chip-${l}`, a = {
            index: l,
            onEdit: me,
            label: e,
            title: e,
            isEditing: l === m,
            size: $,
            disabled: c,
            disableEdition: V,
            onDelete: xe
          };
          return F ? F(H, u, a) : /* @__PURE__ */ ge(H, {
            ...a,
            key: u
          });
        }) : null,
        endAdornment: I ? null : /* @__PURE__ */ x(Q.EndAdornmentClose, {
          style: {
            visibility: G ? "visible" : "hidden"
          },
          children: /* @__PURE__ */ x(Ee, {
            "aria-label": "Clear",
            title: "Clear",
            disabled: c,
            size: "small",
            onClick: Ce,
            children: /* @__PURE__ */ x(ye, {
              fontSize: "small"
            })
          })
        }),
        ...oe
      },
      ...ee
    })
  });
});
Z.defaultProps = {
  onInputChange: () => {
  },
  clearInputOnBlur: !1,
  hideClearAll: !1,
  disableDeleteOnBackspace: !1,
  disableEdition: !1,
  addOnWhichKey: O.enter,
  onDeleteChip: () => {
  },
  onAddChip: () => {
  },
  inputValue: void 0,
  onEditChip: () => {
  },
  renderChip: void 0,
  onDeleteAllChips: () => {
  },
  validate: () => !0
};
function Pe(t, n) {
  return [...t, n];
}
function Ke(t, n) {
  return t.filter((i, r) => n !== r);
}
function ve(t, n, i) {
  return t.map((r, s) => n === s ? i : r);
}
const Fe = C.forwardRef((t, n) => {
  const {
    value: i,
    onChange: r,
    onAddChip: s,
    onInputChange: g,
    onDeleteChip: D,
    disabled: h,
    validate: y,
    clearInputOnBlur: c,
    hideClearAll: A,
    disableDeleteOnBackspace: b,
    onEditChip: d,
    renderChip: T,
    disableEdition: I,
    addOnWhichKey: K,
    inputValue: $,
    ...v
  } = t;
  return /* @__PURE__ */ x(Z, {
    chips: i,
    onAddChip: (o) => {
      if (h)
        return;
      const p = Pe(i, o), B = p.length - 1;
      s?.(o, B), r?.(p);
    },
    onInputChange: g,
    disableDeleteOnBackspace: b,
    onDeleteChip: (o) => {
      if (h)
        return;
      const p = i[o];
      r?.(Ke(i, o)), D?.(p, o);
    },
    onEditChip: (o, p) => {
      h || I || (r?.(ve(i, p, o)), d?.(o, p));
    },
    renderChip: T,
    onDeleteAllChips: () => {
      r?.([]);
    },
    clearInputOnBlur: c,
    disabled: h,
    disableEdition: I,
    validate: y,
    inputValue: $,
    hideClearAll: A,
    addOnWhichKey: K,
    ...v,
    ref: n
  });
});
Fe.defaultProps = {
  value: [],
  onChange: () => {
  },
  onAddChip: () => {
  },
  onDeleteChip: () => {
  },
  onInputChange: () => {
  },
  onEditChip: () => {
  },
  addOnWhichKey: O.enter,
  clearInputOnBlur: !1,
  disableEdition: !1,
  hideClearAll: !1,
  disableDeleteOnBackspace: !1,
  validate: () => !0
};
export {
  Fe as MuiChipsInput
};
